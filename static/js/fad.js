//

function showSettings() {
	if (document.getElementById('settings').offsetWidth == 0) {
		$('#settings').animate({
			width: '30%'
		}, "fast");
		document.getElementById('settings_icon').style.fill = "#012036";
	} else {
		$('#settings').animate({
			width: '0'
		}, "fast");
		document.getElementById('settings_icon').style.fill = "white";
	}
}

function toggleAudio() {
	if (document.getElementById("audio_feedback").checked) {
		localStorage['audio_feedback'] = "enabled";
	} else {
		localStorage['audio_feedback'] = "disabled";
	}
}

function toggleAutoScroll() {
	if (document.getElementById("auto_scroll").checked) {
		localStorage['auto_scroll'] = "enabled";
		animateTable();
	} else {
		localStorage['auto_scroll'] = "disabled";
		clearInterval(intervalID);
	}
}

$(document).ready(function () {
	connect();

	if (localStorage.getItem("auto_scroll") === null || localStorage.getItem("auto_scroll") === "enabled") {
		document.getElementById("auto_scroll").checked = true;
		localStorage['auto_scroll'] = "enabled";
	} else {
		document.getElementById("auto_scroll").checked = false;
	}

	if (localStorage.getItem("audio_feedback") === null || localStorage.getItem("audio_feedback") === "enabled") {
		document.getElementById("audio_feedback").checked = true;
		localStorage['audio_feedback'] = "enabled";
	} else {
		document.getElementById("audio_feedback").checked = false;
	}
	
	if (localStorage.getItem("show_unscored") === null || localStorage.getItem("show_unscored") === "enabled") {
		document.getElementById("show_unscored").checked = true;
		localStorage['show_unscored'] = "enabled";
	} else {
		document.getElementById("show_unscored").checked = false;
	}
});

function connect() {
	// Establish SSE connection
	const source = new EventSource("data");

	// version checker
	source.addEventListener("version", function (event) {

		var ver = JSON.parse(event.data);

		if (localStorage['version'] != ver && localStorage['version'] != null) {
			localStorage['version'] = ver;
			location.reload(true);
		}
		else {
			localStorage['version'] = ver;
		}
	});

	// list event listener
	source.addEventListener("list", function (event) {
		const lists = JSON.parse(event.data);
		// display received list with stored min_score if avaliable or no score filtering if new
		if (!(localStorage['min_score'] <= 9 && localStorage['min_score'] >= 1))
			localStorage['min_score'] = 1;
		let min_score_val = localStorage['min_score']
		display_data(lists, min_score_val);
		let min_score_list = document.getElementById("min_score");
		min_score_list.value = min_score_val;

		// play the notification audio every time the server send new event
		if (document.getElementById("audio_feedback").checked) {
			var notif = document.getElementById("notif_audio");
			notif.play();
		}

		// reset last updated time
		stopTimer();
		startTimer();

		// Score filtering handler
		$('select#min_score').change(function () {
			let min_score_list = document.getElementById("min_score");
			let min_score_val = min_score_list.options[min_score_list.selectedIndex].value;
			display_data(lists, min_score_val);
			localStorage['min_score'] = min_score_val;
		});
		
		// Unscored option handling
		$('input#show_unscored').change(function () {
			if (document.getElementById("show_unscored").checked) {
				localStorage['show_unscored'] = "enabled";
			} else {
				localStorage['show_unscored'] = "disabled";
			}
			display_data(lists, localStorage['min_score']);
		});
	});

	source.addEventListener("msg", function (event) {
		// display received message
		const msge = JSON.parse(event.data);
		$('div#error_msg').empty().append(msge);
	});

	source.onerror = function (err) {
		switch (err.target.readyState) {
			// auto reconnecting
			case EventSource.CONNECTING:
				break;

			case EventSource.CLOSED:
				// call connect function to re-connect the server (after waiting for sometime)
				setTimeout(connect, 60000);
				break;
		}
	};
}

function display_data(data, min_score) {
	$('div#table_body').empty()
	var indx = 0;
	for (var i = 0; i < data.length; i++) {
		// check score
		if (data[i].Score >= min_score || (data[i].Score == 0 && document.getElementById("show_unscored").checked)) {
			indx = indx + 1;
			const container = document.createElement("div");
			container.className = "container";

			// Index column
			const index = document.createElement("div");
			index.className = "div_sn";
			index.innerHTML = indx;
			container.appendChild(index);

			// Score column
			const score = document.createElement("div");
			score.innerHTML = data[i].Score;

			/*
			 * CVSS v3.0 Ratings:
			 * 	Critical		9.0-10.0
			 * 	High			7.0-8.9l
			 * 	Medium	4.0-6.9
			 * 	Low			0.1-3.9
			 * 	None		0.0
			 */
			if (data[i].Score >= 9) {
				score.className = "div_score critical";
				score.title = "Critical";
			} else if (data[i].Score >= 7) {
				score.className = "div_score high";
				score.title = "High";
			} else if (data[i].Score >= 4) {
				score.className = "div_score medium";
				score.title = "Medium";
			} else if (data[i].Score > 0) {
				score.className = "div_score low";
				score.title = "Low";
			} else {
				score.className = "div_score none";
				score.title = "Not scored";
			}

			container.appendChild(score);

			// CVE id column
			const ID = document.createElement("div");
			ID.className = "div_id";
			// CVE id nist link
			const a = document.createElement('a');
			const linkText = document.createTextNode(data[i].ID);
			a.appendChild(linkText);
			a.target = '_blank';
			a.title = data[i].ID;
			a.href = data[i].URL;
			ID.appendChild(a);
			container.appendChild(ID);

			// CVE vendor/product column
			const vendor = document.createElement("div");
			vendor.className = "div_vendor";
			vendor.innerHTML = data[i].Vendor + ' ' + data[i].Product;
			container.appendChild(vendor);

			// CVE description column
			const desc = document.createElement("div");
			desc.className = "div_desc";
			desc.innerHTML = data[i].Description;
			container.appendChild(desc);

			// Published date column
			const date = document.createElement("div");
			date.className = "div_date";
			var cve_datetime = new Date(data[i].Pub_Date + "Z");
			cve_datetime.toString();
			var formatted_datetime = cve_datetime.getFullYear() + "-" + ("0" + (cve_datetime.getMonth() + 1)).slice(-2) + "-" + cve_datetime.getDate() + " " + ("0" + cve_datetime.getHours()).slice(-2) + ":" + ("0" + cve_datetime.getMinutes()).slice(-2);
			date.innerHTML = formatted_datetime;
			container.appendChild(date);

			$('div#table_body').append(container);
		}
	}
}

var w = null;

function startTimer() {

	// check whether Web Workers are supported
	if (typeof (Worker) !== "undefined") {
		// Check whether Web Worker has been created. If not, create a new Web Worker based on the Javascript file time_worker.js
		if (w == null) {
			w = new Worker("static/js/time_worker.js");
		}

		// Update last_date div with output from Web Worker
		w.onmessage = function (event) {
			document.getElementById("last_date").innerHTML = event.data;
		};
	} else {
		// Web workers are not supported
		document.getElementById("last_date").innerHTML = "Sorry, can't display last updated time your browser does not support Web Workers ";
	}
}

function stopTimer() {
	// if the worker is already created, terminate it
	if (w != null) {
		w.terminate();
		w = undefined;
	}
}

// DIV Scrolling Animation
animDelay = 1000;
let intervalID;
let animStop = false;

window.addEventListener("load", () => {
	if (document.getElementById("auto_scroll").checked) {
		// Start the animation after some delay
		self.setTimeout(() => {
			animateTable();
		}, animDelay);
	}
});

function animateTable() {
	const listContainer = document.getElementById("animDIV");
	let speed = 10;
	intervalID = self.setInterval(() => {
		if (!animStop) {
			// Calculate and set the suitable height for the Table body
			const listHeight = window.innerHeight - (document.getElementById("page_header").offsetHeight + document.getElementById("table_head").offsetHeight + 15);
			listContainer.setAttribute("style", "height:" + listHeight + "px");
			const listScrollHeight = listContainer.scrollHeight;
			if (listContainer.scrollTop < listScrollHeight - listContainer.offsetHeight) {
				listContainer.scrollTo({ top: listContainer.scrollTop + speed, left: 0, behavior: 'smooth' });
			} else {
				try {
					document.getElementById("old_table").remove();
				} catch {
					// No old table
				}

				const t1 = document.getElementById("table_body");
				const clone = t1.cloneNode(true);
				t1.id = "old_table"
				listContainer.appendChild(clone);
			}
		}
	}, 17);
}


